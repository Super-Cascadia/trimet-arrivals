{"version":3,"sources":["store/action/stopActions.ts","component/buttons/RemoveBookmarkButton.tsx","view/bookmarks/component/bookmarkSections/sectionSelector/sectionSelectorUtil.ts","view/bookmarks/component/bookmarkSections/sectionSelector/BookmarksInSectionSelector.tsx","view/bookmarks/component/bookmarkSections/sectionSelector/BookmarksInSectionSelectionHandler.tsx","view/bookmarks/container/BookmarksInSectionSelectorContainer.tsx","component/buttons/RemoveBookmarkSectionButton.tsx","view/bookmarks/component/bookmarkSections/sectionName/EditSectionNameInput.tsx","view/bookmarks/component/bookmarkSections/sectionName/BookmarkSectionNameControl.tsx","view/bookmarks/component/bookmarkSections/BookmarkSectionNav.tsx","view/bookmarks/component/bookmarkSections/BookmarkSectionComponent.tsx","view/bookmarks/container/BookmarkSectionContainer.tsx"],"names":["__webpack_require__","d","__webpack_exports__","loadArrivalDataRequest","loadStopDataRequest","_constants__WEBPACK_IMPORTED_MODULE_0__","locationId","payload","type","LOAD_ARRIVALS_DATA_REQUEST","radiusInFeet","LOAD_STOP_DATA_REQUEST","RemoveBookmarkButton","_ref","stopId","removeBookmarkFromSection","onClick","bind","undefined","react_default","a","createElement","className","title","lib_default","name","formatStopLocations","bookmarks","map","stop","color","label","concat","locid","desc","value","BookmarksInSectionSelector","bookmarksInSection","allBookmarks","onChange","defaultOptions","options","react_select_esm","styles","control","Object","objectSpread","backgroundColor","multiValue","data","chroma","alpha","css","multiValueLabel","_ref2","multiValueRemove","_ref3","hover","option","_ref4","isDisabled","isFocused","isSelected","contrast","cursor","isMulti","defaultValue","BookmarksInSectionSelectionHandler","_this$props","this","props","bookmarkSectionId","id","val","event","action","removeAllBookmarksFromSection","removedValue","addBookmarkToBookmarkSection","Component","BookmarksInSectionSelectorContainer","connect","state","ownProps","bookmarksInSectionSelector","bookmarkedStopLocationSelector","dispatch","removeBookmarkFromSectionRequest","addBookmarkToBookmarkSectionRequest","removeAllBookmarksInSectionRequest","confirmDeletion","removeBookmarkSection","window","confirm","RemoveBookmarkSectionButton","EditSectionNameInput","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","sectionName","assertThisInitialized","e","_this2","setState","target","updateBookmarkSectionName","EditModeToggleButton","editMode","classNames","cx","enabled","BookmarkSectionNameControl","toggleEditMode","EditSectionNameInput_EditSectionNameInput","RemoveBookmarkSectionButton_RemoveBookmarkSectionButton","BookmarkSectionNav","container_BookmarksInSectionSelectorContainer","BookmarkSectionComponent","bookmarkedStops","isEmpty","onRemoveBookmarkFromSection","stopLocation","key","StopContainer","showArrivals","onRouteIndicatorClick","RemoveBookmarkButton_RemoveBookmarkButton","onUpdateBookmarkSectionName","removeSection","BookmarkSectionNav_BookmarkSectionNav","getBookmarksInSection","BookmarkSectionContainer","bookmarkSectionNameSelector","removeBookmarkSectionRequest","bookmarkSectionName","updateBookmarkSectionNameRequest"],"mappings":"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","file":"static/js/201.1682f6a9.chunk.js","sourcesContent":["import {\n  LOAD_ARRIVALS_DATA_REQUEST,\n  LOAD_STOP_DATA_REQUEST,\n  UPDATE_VIEW_REQUEST\n} from \"../constants\";\n\nexport type LoadStopData = (radiusInFeet: number) => void;\nexport type LoadArrivalData = (locationId: number) => void;\n\nexport const loadArrivalDataRequest = (locationId: number) => ({\n  payload: { locationId },\n  type: LOAD_ARRIVALS_DATA_REQUEST\n});\n\nexport const loadStopDataRequest = (radiusInFeet: number) => ({\n  payload: { radiusInFeet },\n  type: LOAD_STOP_DATA_REQUEST\n});\n\nexport const changeViewRequest = (view: string) => ({\n  payload: { view },\n  type: UPDATE_VIEW_REQUEST\n});\n","import React from \"react\";\nimport FontAwesome from \"react-fontawesome\";\n\ninterface Props {\n  stopId: number;\n  removeBookmarkFromSection: (stopId: number) => void;\n}\n\nexport const RemoveBookmarkButton = ({\n  stopId,\n  removeBookmarkFromSection\n}: Props) => {\n  const onClick = removeBookmarkFromSection\n    ? removeBookmarkFromSection.bind(this, stopId)\n    : undefined;\n\n  return (\n    <button\n      onClick={onClick}\n      className=\"close-button\"\n      title=\"Remove bookmark from Bookmark Section\"\n    >\n      <FontAwesome name=\"times-circle\" />\n    </button>\n  );\n};\n","import chroma from \"chroma-js\";\nimport { map } from \"lodash\";\nimport { StopLocation } from \"../../../../../api/trimet/types\";\n\nexport function customStyles() {\n  return {\n    control: styles => ({ ...styles, backgroundColor: \"white\" }),\n    multiValue: (styles, { data }) => {\n      const color = chroma(data.color);\n\n      return {\n        ...styles,\n        backgroundColor: color.alpha(0.1).css()\n      };\n    },\n    multiValueLabel: (styles, { data }) => ({\n      ...styles,\n      color: data.color\n    }),\n    multiValueRemove: (styles, { data }) => ({\n      ...styles,\n      color: data.color,\n      hover: {\n        backgroundColor: data.color,\n        color: \"white\"\n      }\n    }),\n    option: (styles, { data, isDisabled, isFocused, isSelected }) => {\n      const color = chroma(data.color);\n      return {\n        ...styles,\n        backgroundColor: isDisabled\n          ? null\n          : isSelected\n          ? data.color\n          : isFocused\n          ? color.alpha(0.1).css()\n          : null,\n        color: isDisabled\n          ? \"#ccc\"\n          : isSelected\n          ? chroma.contrast(color, \"white\") > 2\n            ? \"white\"\n            : \"black\"\n          : data.color,\n        cursor: isDisabled ? \"not-allowed\" : \"default\"\n      };\n    }\n  };\n}\n\nexport function formatStopLocations(bookmarks: StopLocation[]) {\n  return map(bookmarks, stop => {\n    return {\n      color: \"#FF5630\",\n      label: `${stop.locid}: ${stop.desc}`,\n      value: stop.locid\n    };\n  });\n}\n","import React from \"react\";\nimport Select from \"react-select\";\nimport { StopLocation } from \"../../../../../api/trimet/types\";\nimport { customStyles, formatStopLocations } from \"./sectionSelectorUtil\";\n\ninterface Props {\n  bookmarksInSection: StopLocation[];\n  allBookmarks: StopLocation[];\n  onChange: () => void;\n}\n\nexport default function BookmarksInSectionSelector({\n  bookmarksInSection,\n  allBookmarks,\n  onChange\n}: Props) {\n  const defaultOptions = formatStopLocations(bookmarksInSection);\n  const options = formatStopLocations(allBookmarks);\n\n  return (\n    <Select\n      styles={customStyles()}\n      options={options}\n      isMulti={true}\n      defaultValue={defaultOptions}\n      onChange={onChange}\n    />\n  );\n}\n","import React, { Component } from \"react\";\nimport { StopLocation } from \"../../../../../api/trimet/types\";\nimport BookmarksInSectionSelector from \"./BookmarksInSectionSelector\";\n\ninterface Props {\n  bookmarksInSection: StopLocation[];\n  allBookmarks: StopLocation[];\n  removeBookmarkFromSection: (\n    bookmarkSectionId: number,\n    stopId: number\n  ) => void;\n  addBookmarkToBookmarkSection: (\n    bookmarkSectionId: number,\n    stopId: number\n  ) => void;\n  removeAllBookmarksFromSection: (bookmarkSectionId: number) => void;\n  bookmarkSectionId: number;\n}\n\nexport const REMOVE_VALUE = \"remove-value\";\nexport const SELECT_OPTION = \"select-option\";\nexport const POP_VALUE = \"pop-value\";\nexport const CLEAR = \"clear\";\n\nexport default class BookmarksInSectionSelectionHandler extends Component<\n  Props\n> {\n  public render() {\n    const { allBookmarks, bookmarksInSection, bookmarkSectionId } = this.props;\n    const onChange = this.onChange.bind(this, bookmarkSectionId);\n\n    return (\n      <BookmarksInSectionSelector\n        bookmarksInSection={bookmarksInSection}\n        allBookmarks={allBookmarks}\n        onChange={onChange}\n      />\n    );\n  }\n\n  private onChange(id, val, event) {\n    switch (event.action) {\n      case CLEAR:\n        this.props.removeAllBookmarksFromSection(id);\n        break;\n      case REMOVE_VALUE:\n      case POP_VALUE:\n        this.props.removeBookmarkFromSection(id, event.removedValue.value);\n        break;\n      case SELECT_OPTION:\n        this.props.addBookmarkToBookmarkSection(id, event.option.value);\n        break;\n    }\n  }\n}\n","import { connect } from \"react-redux\";\nimport {\n  addBookmarkToBookmarkSectionRequest,\n  removeAllBookmarksInSectionRequest,\n  removeBookmarkFromSectionRequest\n} from \"../../../store/action/bookmarkSectionActions\";\nimport { RootState } from \"../../../store/reducers\";\nimport { bookmarksInSectionSelector } from \"../../../store/selectors/bookmarkSectionSelectors\";\nimport { bookmarkedStopLocationSelector } from \"../../../store/selectors/bookmarkSelectors\";\nimport BookmarksInSectionSelectionHandler from \"../component/bookmarkSections/sectionSelector/BookmarksInSectionSelectionHandler\";\n\nconst mapStateToProps = (state: RootState, ownProps) => {\n  const id = ownProps.bookmarkSectionId;\n  const bookmarksInSection = bookmarksInSectionSelector(state, id);\n  const allBookmarks = bookmarkedStopLocationSelector(state);\n\n  return {\n    allBookmarks,\n    bookmarksInSection\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    removeBookmarkFromSection(bookmarkSectionId: number, stopId: number) {\n      dispatch(removeBookmarkFromSectionRequest(bookmarkSectionId, stopId));\n    },\n    addBookmarkToBookmarkSection(bookmarkSectionId, stopId) {\n      dispatch(addBookmarkToBookmarkSectionRequest(bookmarkSectionId, stopId));\n    },\n    removeAllBookmarksFromSection(bookmarkSectionId) {\n      dispatch(removeAllBookmarksInSectionRequest(bookmarkSectionId));\n    }\n  };\n};\n\nconst BookmarksInSectionSelectorContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BookmarksInSectionSelectionHandler);\n\nexport default BookmarksInSectionSelectorContainer;\n","import React from \"react\";\nimport FontAwesome from \"react-fontawesome\";\n\ninterface RemoveBookmarkSectionButtonProps {\n  removeBookmarkSection: () => void;\n}\n\nfunction confirmDeletion(removeBookmarkSection) {\n  if (window.confirm(\"Are you sure you want to remove this section?\")) {\n    removeBookmarkSection();\n  }\n}\n\nexport const RemoveBookmarkSectionButton = ({\n  removeBookmarkSection\n}: RemoveBookmarkSectionButtonProps) => {\n  return (\n    <button\n      className=\"close-button group-menu-item\"\n      onClick={confirmDeletion.bind(this, removeBookmarkSection)}\n      title=\"Remove Bookmark Section\"\n    >\n      <FontAwesome name=\"times-circle\" />\n    </button>\n  );\n};\n","import React, { Component } from \"react\";\n\ninterface Props {\n  sectionName: string;\n  updateBookmarkSectionName: (bookmarkSectionName: string) => void;\n}\n\ninterface State {\n  sectionName: string;\n}\n\nexport default class EditSectionNameInput extends Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sectionName: props.sectionName\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  public onChange(e) {\n    this.setState(\n      {\n        sectionName: e.target.value\n      },\n      () => {\n        this.props.updateBookmarkSectionName(this.state.sectionName);\n      }\n    );\n  }\n\n  public render() {\n    return (\n      <input\n        type=\"text\"\n        value={this.state.sectionName}\n        onChange={this.onChange}\n        className=\"edit-section-name-input\"\n      />\n    );\n  }\n}\n","import cx from \"classnames\";\nimport React from \"react\";\nimport FontAwesome from \"react-fontawesome\";\nimport { RemoveBookmarkSectionButton } from \"../../../../../component/buttons/RemoveBookmarkSectionButton\";\nimport EditSectionNameInput from \"./EditSectionNameInput\";\n\nfunction EditModeToggleButton({ onClick, editMode }) {\n  const classNames = cx(\"group-menu-item\", \"edit-toggle-button\", {\n    enabled: editMode\n  });\n\n  return (\n    <button onClick={onClick} className={classNames}>\n      <FontAwesome name=\"edit\" />\n    </button>\n  );\n}\n\ninterface Props {\n  editMode: boolean;\n  name: string;\n  removeBookmarkSection: () => void;\n  toggleEditMode: () => void;\n  updateBookmarkSectionName: (bookmarkSectionName: string) => void;\n}\n\nexport default function BookmarkSectionNameControl({\n  editMode,\n  name,\n  removeBookmarkSection,\n  toggleEditMode,\n  updateBookmarkSectionName\n}: Props) {\n  return (\n    <div className=\"bookmark-section-control-wrapper\">\n      <div className=\"bookmark-section-name-wrapper\">\n        {editMode && (\n          <EditSectionNameInput\n            sectionName={name}\n            updateBookmarkSectionName={updateBookmarkSectionName}\n          />\n        )}\n        {!editMode && <h3>{name}</h3>}\n      </div>\n      <div className=\"bookmark-section-edit-controls-wrapper\">\n        {editMode && (\n          <RemoveBookmarkSectionButton\n            removeBookmarkSection={removeBookmarkSection}\n          />\n        )}\n        <EditModeToggleButton editMode={editMode} onClick={toggleEditMode} />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport BookmarksInSectionSelectorContainer from \"../../container/BookmarksInSectionSelectorContainer\";\nimport \"./BookmarkSectionNav.css\";\nimport BookmarkSectionNameControl from \"./sectionName/BookmarkSectionNameControl\";\n\ninterface BookmarkSectionNavProps {\n  name: string;\n  removeBookmarkSection: () => void;\n  editMode: boolean;\n  toggleEditMode: () => void;\n  updateBookmarkSectionName: (bookmarkSectionName: string) => void;\n  bookmarkSectionId: number;\n}\n\nexport const BookmarkSectionNav = ({\n  removeBookmarkSection,\n  name,\n  editMode,\n  updateBookmarkSectionName,\n  toggleEditMode,\n  bookmarkSectionId\n}: BookmarkSectionNavProps) => {\n  return (\n    <nav className=\"bookmark-section-nav-wrapper\">\n      <BookmarkSectionNameControl\n        editMode={editMode}\n        name={name}\n        removeBookmarkSection={removeBookmarkSection}\n        toggleEditMode={toggleEditMode}\n        updateBookmarkSectionName={updateBookmarkSectionName}\n      />\n      <div>\n        {editMode && (\n          <BookmarksInSectionSelectorContainer\n            bookmarkSectionId={bookmarkSectionId}\n          />\n        )}\n      </div>\n    </nav>\n  );\n};\n","import { isEmpty, map } from \"lodash\";\nimport React, { Component } from \"react\";\nimport { StopLocation } from \"../../../../api/trimet/types\";\nimport { RemoveBookmarkButton } from \"../../../../component/buttons/RemoveBookmarkButton\";\nimport StopContainer from \"../../../stops/containers/StopContainer\";\nimport \"./BookmarkSectionComponent.css\";\nimport { BookmarkSectionNav } from \"./BookmarkSectionNav\";\n\ninterface Props {\n  name: string;\n  id: number;\n  bookmarksInSection: StopLocation[];\n  removeBookmarkSection: (bookmarkSectionId: number) => void;\n  allBookmarks: StopLocation[];\n  removeBookmarkFromSection: (\n    bookmarkSectionId: number,\n    stopId: number\n  ) => void;\n  updateBookmarkSectionName: (\n    bookmarkSectionId: number,\n    bookmarkSectionName: string\n  ) => void;\n}\n\ninterface State {\n  editMode: boolean;\n}\n\nexport default class BookmarkSectionComponent extends Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      editMode: false\n    };\n\n    this.toggleEditMode = this.toggleEditMode.bind(this);\n  }\n\n  public getBookmarksInSection(bookmarkedStops: StopLocation[], id: number) {\n    if (isEmpty(bookmarkedStops)) {\n      return (\n        <p className=\"bookmark-section-add-more\">\n          Select bookmarks from the list above to see them here.\n        </p>\n      );\n    }\n    const { removeBookmarkFromSection } = this.props;\n    const onRemoveBookmarkFromSection = removeBookmarkFromSection\n      ? removeBookmarkFromSection.bind(this, id)\n      : undefined;\n\n    return map(bookmarkedStops, stopLocation => {\n      return (\n        <li key={stopLocation.locid}>\n          <div className=\"bookmark-stop-wrapper\">\n            <div className=\"bookmark-flex-container\">\n              <div className=\"bookmark-stop-flex-item\">\n                <StopContainer\n                  showArrivals={false}\n                  locationId={stopLocation.locid}\n                  onRouteIndicatorClick={undefined}\n                />\n              </div>\n              {this.state.editMode && (\n                <div className=\"bookmark-remove-flex-item\">\n                  <RemoveBookmarkButton\n                    stopId={stopLocation.locid}\n                    removeBookmarkFromSection={onRemoveBookmarkFromSection}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n        </li>\n      );\n    });\n  }\n\n  public render() {\n    const {\n      name,\n      bookmarksInSection,\n      id,\n      updateBookmarkSectionName,\n      removeBookmarkSection\n    } = this.props;\n\n    const onUpdateBookmarkSectionName = updateBookmarkSectionName\n      ? updateBookmarkSectionName.bind(this, id)\n      : undefined;\n    const removeSection =\n      removeBookmarkSection && removeBookmarkSection.bind(this, id);\n\n    return (\n      <article className=\"bookmark-section\" key={id}>\n        <BookmarkSectionNav\n          name={name}\n          toggleEditMode={this.toggleEditMode}\n          editMode={this.state.editMode}\n          removeBookmarkSection={removeSection}\n          updateBookmarkSectionName={onUpdateBookmarkSectionName}\n          bookmarkSectionId={id}\n        />\n        <ul className=\"bookmark-section-bookmarks\">\n          {this.getBookmarksInSection(bookmarksInSection, id)}\n        </ul>\n      </article>\n    );\n  }\n\n  public toggleEditMode() {\n    this.setState({\n      editMode: !this.state.editMode\n    });\n  }\n}\n","import { connect } from \"react-redux\";\nimport {\n  removeBookmarkFromSectionRequest,\n  removeBookmarkSectionRequest,\n  updateBookmarkSectionNameRequest\n} from \"../../../store/action/bookmarkSectionActions\";\nimport { RootState } from \"../../../store/reducers\";\nimport {\n  bookmarkSectionNameSelector,\n  bookmarksInSectionSelector\n} from \"../../../store/selectors/bookmarkSectionSelectors\";\nimport BookmarkSectionComponent from \"../component/bookmarkSections/BookmarkSectionComponent\";\n\nconst mapStateToProps = (state: RootState, ownProps) => {\n  const id = ownProps.bookmarkSectionId;\n  const bookmarksInSection = bookmarksInSectionSelector(state, id);\n  const name = bookmarkSectionNameSelector(state, id);\n\n  return {\n    bookmarksInSection,\n    id,\n    name\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    removeBookmarkSection(bookmarkSectionId: number) {\n      dispatch(removeBookmarkSectionRequest(bookmarkSectionId));\n    },\n    removeBookmarkFromSection(bookmarkSectionId: number, stopId: number) {\n      dispatch(removeBookmarkFromSectionRequest(bookmarkSectionId, stopId));\n    },\n    updateBookmarkSectionName(\n      bookmarkSectionId: number,\n      bookmarkSectionName: string\n    ) {\n      dispatch(\n        updateBookmarkSectionNameRequest(bookmarkSectionId, bookmarkSectionName)\n      );\n    }\n  };\n};\n\nconst BookmarkSectionContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BookmarkSectionComponent);\n\nexport default BookmarkSectionContainer;\n"],"sourceRoot":""}