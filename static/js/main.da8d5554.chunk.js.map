{"version":3,"sources":["store/reducers/arrivalsReducer.ts","store/reducers/bookmarkSectionReducer.ts","store/reducers/bookmarksReducer.ts","store/reducers/currentLocationReducer.ts","store/reducers/nearbyViewReducer.ts","store/reducers/util/getRoutesFromStopLocations.ts","store/reducers/stopsReducer.ts","store/reducers/viewReducer.ts","store/reducers/index.ts","api/trimet/util.ts","api/trimet/arrivals.ts","store/sagas/arrivalSagas.ts","api/localstorage/util/index.ts","api/localstorage/bookmarks.localstorage.ts","store/sagas/bookmarkSagas.ts","api/localstorage/bookmarkSections.ts","store/sagas/util.ts","store/sagas/bookmarkSectionSagas.ts","api/geolocation/getCurrentPosition.ts","api/trimet/stops.ts","store/sagas/stopSagas.ts","store/sagas/viewSagas.ts","store/sagas/index.ts","App.tsx","store/store.ts","component/loadIndicator/RouteLoadIndicator.tsx","registerServiceWorker.ts","index.tsx","api/trimet/constants.ts","store/constants/index.ts","store/constants/bookmarkSections.ts"],"names":["initialState","arrivals","loading","setLatestStopLoadingState","state","locationId","newState","Object","objectSpread","defineProperty","updateArrivalsState","newArrivals","arrivalsReducer","arguments","length","undefined","action","type","LOAD_ARRIVALS","payload","LOAD_ARRIVALS_COMPLETE","arrivalData","arrival","groupBy","locid","InitialState","bookmarkInputSectionName","bookmarkSections","bookmarkSectionReducer","UPDATE_BOOKMARK_SECTION_NAME_INPUT","name","updateNewBookmarkSectionName","CREATE_BOOKMARK_SECTION","_action$payload","nextId","bookmarkSection","createBookmarkSection","REMOVE_BOOKMARK_SECTION","updatedBookmarkSections","omit","bookmarkSectionId","removeBookmarkSection","UPDATE_BOOKMARKS_SECTION_CONTENTS","_action$payload2","selectedBookmarkSection","stopId","bookmarkedStops","find","id","updatedBookmarks","concat","toConsumableArray","slice","updateBookmarkSectionContents","LOAD_BOOKMARK_SECTIONS_COMPLETE","loadBookmarkSectionsComplete","REMOVE_BOOKMARK_FROM_SECTION","_action$payload3","stop","filter","removeBookmarkFromSection","REMOVE_ALL_BOOKMARKS_FROM_SECTION","removeAllBookmarksInSection","UPDATE_BOOKMARK_SECTION_NAME","_action$payload4","bookmarkSectionName","updateBookmarkSectionName","bookmarks","bookmarksReducer","CREATE_STOP_BOOKMARK","stopLocation","createStopBookmark","REMOVE_STOP_BOOKMARK","newBookmarks","omitBy","item","removeStopBookmark","LOAD_BOOKMARKS_COMPLETE","loadBookmarksComplete","coordinates","currentLocationReducer","CURRENT_LOCATION_LOAD_COMPLETE","_action$payload$locat","location","coords","latitude","longitude","updateCoordinates","UPDATE_VIEW","activeView","nearbyViewReducer","getRoutesFromStops2","stopLocations","reduce","acc","key","each","route","routeId","nearbyRoute","directionId","dir","routeDirections","description","desc","addDirectionToRoute","routeDirection","routeInfo","createInitialRoute","calculateDistance","lng","lat","currentLocation","getDistance","formatStopLocations","stopLocationsWithDistance","map","index","distance","distanceOrder","addDistanceToCurrentLocation","mapKeys","timeOfLastLoad","stopsReducer","LOAD_STOPS","getLoadStopsCompleteState","LOAD_STOP_COMPLETE","stopData","nearbyRoutes","moment","format","getLoadStopCompleteState","getLoadArrivalsCompleteState","viewReducer","CHANGE_VIEW","app","combineReducers","nearbyReducer","getTrimetData","_x","_getTrimetData","apply","this","_callee","requestURI","regenerator_default","a","wrap","_context","prev","next","abrupt","fetch","then","res","json","resultSet","ARRIVALS_BASE_URL","BASE_URL","getURL","locIDs","minutes","API","getArrivals","_x2","_getArrivals","request","loadArrivalData","MINUTES_TO_POLL_ARRIVALS","stringNumberLocationId","toString","put","call","sent","t0","_marked","fetchLocalStorageItemByKey","JSON","parse","localStorage","getItem","updateStoredItemByKey","content","setItem","stringify","BOOKMARKS","fetchStoredBookmarks","updateBookmarks","existingBookmarks","storeLocationBookmark","removeStoredBookmark","bookmarkStop","_stopLocation","error","bookmarkSagas_marked","_locationId","_context2","_marked2","BOOKMARK_SECTIONS","fetchStoredBookmarkSections","updateStoredBookmarkSections","storeBookmarkSection","removeStoredBookmarkSection","updateStoredBookmarkSection","push","removeStoredBookmarkFromSection","bookmarkSectionStops","removeAllStoredBookmarksInSection","updateStoredBookmarkSectionName","getNextId","_ref","isEmpty","bookmarksByKeys","keys","lastKey","parseInt","getBookmarkName","_ref2","buildBookmarkSection","bookmarkName","order","updateSectionInputName","updateSelectedBookmarkSection","bookmarkSectionSagas_marked","select","bookmarkSectionSagas_marked2","_context3","_marked3","_context4","_marked4","_context5","_marked5","_context6","_marked6","_context7","_marked7","getCurrentPosition","Promise","resolve","STOPS_BASE_URL","long","radiusInFeet","latLng","feet","getNearbyStops","_getNearbyStops","loadStopData","updateNearbyActiveView","stopSagas_marked","view","stopSagas_marked2","changeView","initialLoad","viewSagas_marked","viewSagas_marked2","rootSaga","takeEvery","LOAD_STOP_DATA_REQUEST","LOAD_ARRIVALS_DATA_REQUEST","CHANGE_VIEW_REQUEST","INITIAL_LOAD_REQUEST","BOOKMARK_STOP_REQUEST","REMOVE_BOOKMARK_STOP_REQUEST","BOOKMARK_SECTION_NAME_UPDATE_REQUEST","CREATE_BOOKMARK_SECTION_REQUEST","REMOVE_BOOKMARK_SECTION_REQUEST","BOOKMARK_SECTION_SELECT_REQUEST","REMOVE_BOOKMARK_FROM_SECTION_REQUEST","REMOVE_ALL_BOOKMARKS_IN_SECTION_REQUEST","UPDATE_BOOKMARK_SECTION_NAME_REQUEST","UPDATE_VIEW_REQUEST","sagas_marked","store","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","createStore","reducers","applyMiddleware","thunk","run","appStore","NearbyStopsViewContainer","lazy","__webpack_require__","e","bind","BookmarksViewContainer","Home","App","react_default","createElement","es","react_router_dom","basename","process","react","fallback","className","lib_default","size","spin","react_router","exact","path","component","React","Component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","App_App","document","getElementById","URL","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","RED_LINE_NUMBER","BLUE_LINE_NUMBER","GREEN_LINE_NUMBER","YELLOW_LINE_NUMBER","ORANGE_LINE_NUMBER","STREETCAR_S_LINE","STREETCAR_B_LOOP","STREETCAR_A_LOOP","STREETCAR_CL_LINE_SHUTTLE","ROUTE_DISPLAY","_ROUTE_DISPLAY","_Users_jnyeholt_code_trimet_arrivals_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","getRouteColor","d","__webpack_exports__"],"mappings":"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","file":"static/js/main.da8d5554.chunk.js","sourcesContent":["import { groupBy } from \"lodash\";\nimport { Arrival, ArrivalData } from \"../../api/trimet/types\";\nimport { LOAD_ARRIVALS, LOAD_ARRIVALS_COMPLETE } from \"../constants\";\n\nexport interface StopLoadingState {\n  [locationId: number]: boolean;\n}\n\nexport interface ArrivalsReducerState {\n  loading: boolean;\n  arrivals: LocationArrivals;\n  stopLoadingState: StopLoadingState;\n}\n\ninterface Payload {\n  arrivalData: ArrivalData;\n  locationId: number;\n}\n\ninterface Action {\n  payload?: Payload;\n  type: string;\n}\n\nexport interface LocationArrivals {\n  [index: string]: Arrival[];\n}\n\nfunction getArrivals(arrivals: Arrival[]): LocationArrivals {\n  return groupBy(arrivals, (arrival: Arrival) => {\n    return arrival.locid;\n  });\n}\n\nconst initialState = {\n  arrivals: {},\n  loading: {}\n};\n\nfunction setLatestStopLoadingState(\n  state: StopLoadingState,\n  locationId: number,\n  newState: boolean\n): StopLoadingState {\n  return {\n    ...state,\n    [locationId]: newState\n  };\n}\n\nfunction updateArrivalsState(\n  state: LocationArrivals,\n  newArrivals: LocationArrivals\n): LocationArrivals {\n  return {\n    ...state,\n    ...newArrivals\n  };\n}\n\nconst arrivalsReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case LOAD_ARRIVALS:\n      return {\n        ...state,\n        loading: setLatestStopLoadingState(\n          state.loading,\n          action.payload.locationId,\n          true\n        )\n      };\n    case LOAD_ARRIVALS_COMPLETE:\n      const arrivals = getArrivals(action.payload.arrivalData.arrival);\n\n      return {\n        ...state,\n        arrivals: updateArrivalsState(state.arrivals, arrivals),\n        loading: setLatestStopLoadingState(\n          state.loading,\n          action.payload.locationId,\n          false\n        )\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\n\nexport default arrivalsReducer;\n","import { filter, find, omit, slice } from \"lodash\";\nimport { StopLocation } from \"../../api/trimet/types\";\nimport {\n  CREATE_BOOKMARK_SECTION,\n  LOAD_BOOKMARK_SECTIONS_COMPLETE,\n  REMOVE_ALL_BOOKMARKS_FROM_SECTION,\n  REMOVE_BOOKMARK_FROM_SECTION,\n  REMOVE_BOOKMARK_SECTION,\n  UPDATE_BOOKMARK_SECTION_NAME,\n  UPDATE_BOOKMARK_SECTION_NAME_INPUT,\n  UPDATE_BOOKMARKS_SECTION_CONTENTS\n} from \"../constants/bookmarkSections\";\n\nexport interface BookmarkSectionProps {\n  name: string;\n  order: number;\n  bookmarkedStops: number[];\n}\n\nexport interface BookmarkSectionsProps {\n  [id: number]: BookmarkSectionProps;\n}\n\nexport interface BookmarkSectionReducerState {\n  bookmarkInputSectionName: string;\n  bookmarkSections: BookmarkSectionsProps;\n}\n\ninterface Action {\n  type: string;\n  payload: {\n    selectedBookmarkSection?: number;\n    stopLocation?: StopLocation;\n    name?: string;\n    nextId?: number;\n    bookmarkSection?: BookmarkSectionProps;\n    bookmarkSectionId?: number;\n    bookmarkSections?: any;\n    stopId?: number;\n  };\n}\n\nconst InitialState = {\n  bookmarkInputSectionName: \"\",\n  bookmarkSections: {}\n};\n\nfunction updateNewBookmarkSectionName(\n  state: BookmarkSectionReducerState,\n  action: Action\n) {\n  return {\n    ...state,\n    bookmarkInputSectionName: action.payload.name\n  };\n}\n\nfunction createBookmarkSection(\n  state: BookmarkSectionReducerState,\n  action: Action\n) {\n  const { nextId, bookmarkSection } = action.payload;\n\n  return {\n    ...state,\n    bookmarkInputSectionName: \"\",\n    bookmarkSections: {\n      ...state.bookmarkSections,\n      [nextId]: bookmarkSection\n    }\n  };\n}\n\nfunction removeBookmarkSection(\n  state: BookmarkSectionReducerState,\n  action: Action\n) {\n  const updatedBookmarkSections = omit(\n    state.bookmarkSections,\n    action.payload.bookmarkSectionId\n  );\n\n  return {\n    ...state,\n    bookmarkSections: {\n      ...updatedBookmarkSections\n    }\n  };\n}\n\nfunction updateBookmarkSectionContents(\n  state: BookmarkSectionReducerState,\n  action: Action\n) {\n  const { bookmarkSections } = state;\n  const { selectedBookmarkSection, stopId } = action.payload;\n  const bookmarkSection = bookmarkSections[selectedBookmarkSection];\n  const bookmarkedStops = bookmarkSection.bookmarkedStops;\n  const bookmarkInSection = find(bookmarkedStops, id => id === stopId);\n\n  if (!bookmarkInSection) {\n    const updatedBookmarks = [...slice(bookmarkedStops), stopId];\n\n    return {\n      ...state,\n      bookmarkSections: {\n        ...state.bookmarkSections,\n        [selectedBookmarkSection]: {\n          ...bookmarkSection,\n          bookmarkedStops: updatedBookmarks\n        }\n      }\n    };\n  }\n\n  return {\n    ...state\n  };\n}\n\nfunction loadBookmarkSectionsComplete(\n  state: BookmarkSectionReducerState,\n  action: Action\n) {\n  return {\n    ...state,\n    bookmarkSections: {\n      ...action.payload.bookmarkSections\n    }\n  };\n}\n\nfunction removeBookmarkFromSection(\n  state: BookmarkSectionReducerState,\n  action: Action\n) {\n  const { bookmarkSections } = state;\n  const { bookmarkSectionId, stopId } = action.payload;\n  const bookmarkSection = bookmarkSections[bookmarkSectionId];\n  const bookmarkedStops = bookmarkSection.bookmarkedStops;\n  const bookmarkInSection = find(bookmarkedStops, stop => stop === stopId);\n\n  if (bookmarkInSection) {\n    const updatedBookmarks = filter(bookmarkedStops, id => {\n      return id !== stopId;\n    });\n\n    return {\n      ...state,\n      bookmarkSections: {\n        ...state.bookmarkSections,\n        [bookmarkSectionId]: {\n          ...bookmarkSection,\n          bookmarkedStops: [...updatedBookmarks]\n        }\n      }\n    };\n  }\n\n  return {\n    ...state\n  };\n}\n\nfunction removeAllBookmarksInSection(\n  state: BookmarkSectionReducerState,\n  action\n) {\n  const { bookmarkSections } = state;\n  const { bookmarkSectionId } = action.payload;\n  const bookmarkSection = bookmarkSections[bookmarkSectionId];\n\n  return {\n    ...state,\n    bookmarkSections: {\n      ...state.bookmarkSections,\n      [bookmarkSectionId]: {\n        ...bookmarkSection,\n        bookmarkedStops: []\n      }\n    }\n  };\n}\n\nfunction updateBookmarkSectionName(state: BookmarkSectionReducerState, action) {\n  const { bookmarkSections } = state;\n  const { bookmarkSectionId, bookmarkSectionName } = action.payload;\n  const bookmarkSection = bookmarkSections[bookmarkSectionId];\n\n  return {\n    ...state,\n    bookmarkSections: {\n      ...state.bookmarkSections,\n      [bookmarkSectionId]: {\n        ...bookmarkSection,\n        name: bookmarkSectionName\n      }\n    }\n  };\n}\n\nconst bookmarkSectionReducer = (state = InitialState, action: Action) => {\n  switch (action.type) {\n    case UPDATE_BOOKMARK_SECTION_NAME_INPUT:\n      return updateNewBookmarkSectionName(state, action);\n    case CREATE_BOOKMARK_SECTION:\n      return createBookmarkSection(state, action);\n    case REMOVE_BOOKMARK_SECTION:\n      return removeBookmarkSection(state, action);\n    case UPDATE_BOOKMARKS_SECTION_CONTENTS:\n      return updateBookmarkSectionContents(state, action);\n    case LOAD_BOOKMARK_SECTIONS_COMPLETE:\n      return loadBookmarkSectionsComplete(state, action);\n    case REMOVE_BOOKMARK_FROM_SECTION:\n      return removeBookmarkFromSection(state, action);\n    case REMOVE_ALL_BOOKMARKS_FROM_SECTION:\n      return removeAllBookmarksInSection(state, action);\n    case UPDATE_BOOKMARK_SECTION_NAME:\n      return updateBookmarkSectionName(state, action);\n    default:\n      return {\n        ...state\n      };\n  }\n};\n\nexport default bookmarkSectionReducer;\n","import { omitBy } from \"lodash\";\nimport { StopLocation } from \"../../api/trimet/types\";\nimport {\n  CREATE_STOP_BOOKMARK,\n  LOAD_BOOKMARKS_COMPLETE,\n  REMOVE_STOP_BOOKMARK\n} from \"../constants\";\n\nexport interface StopLocations {\n  [locationId: number]: StopLocation;\n}\n\nexport interface BookmarksReducerState {\n  bookmarks: StopLocations;\n}\n\ninterface Action {\n  type: string;\n  payload: {\n    stopLocation?: StopLocation;\n    locationId?: number;\n    bookmarks?: {\n      [locationId: number]: StopLocation;\n    };\n  };\n}\n\nconst InitialState = {\n  bookmarks: {}\n};\n\nfunction removeStopBookmark(state: BookmarksReducerState, action: Action) {\n  const newBookmarks = omitBy({ ...state.bookmarks }, (item: StopLocation) => {\n    return item.locid === action.payload.locationId;\n  });\n\n  return {\n    ...state,\n    bookmarks: newBookmarks\n  };\n}\n\nfunction createStopBookmark(state: BookmarksReducerState, action: Action) {\n  return {\n    ...state,\n    bookmarks: {\n      ...state.bookmarks,\n      [action.payload.stopLocation.locid]: {\n        ...action.payload.stopLocation\n      }\n    }\n  };\n}\n\nfunction loadBookmarksComplete(state: BookmarksReducerState, action: Action) {\n  return {\n    ...state,\n    bookmarks: {\n      ...action.payload.bookmarks\n    }\n  };\n}\n\nconst bookmarksReducer = (state = InitialState, action: Action) => {\n  switch (action.type) {\n    case CREATE_STOP_BOOKMARK:\n      return createStopBookmark(state, action);\n    case REMOVE_STOP_BOOKMARK:\n      return removeStopBookmark(state, action);\n    case LOAD_BOOKMARKS_COMPLETE:\n      return loadBookmarksComplete(state, action);\n    default:\n      return {\n        ...state\n      };\n  }\n};\n\nexport default bookmarksReducer;\n","import { CURRENT_LOCATION_LOAD_COMPLETE } from \"../constants\";\n\ninterface Action {\n  type: string;\n  payload: {\n    location: {\n      coords: {\n        latitude: number;\n        longitude: number;\n      };\n    };\n  };\n}\n\nconst InitialState = {\n  coordinates: null\n};\n\nexport interface CurrentLocationReducerState {\n  coordinates: number[];\n}\n\nfunction updateCoordinates(state: CurrentLocationReducerState, action: Action) {\n  const { latitude, longitude } = action.payload.location.coords;\n  return {\n    ...state,\n    coordinates: [longitude, latitude]\n  };\n}\n\nconst currentLocationReducer = (state = InitialState, action: Action) => {\n  switch (action.type) {\n    case CURRENT_LOCATION_LOAD_COMPLETE:\n      return updateCoordinates(state, action);\n    default:\n      return {\n        ...state\n      };\n  }\n};\n\nexport default currentLocationReducer;\n","export const SHOW_NEARBY_STOPS = \"SHOW_NEARBY_STOPS\";\nexport const SHOW_NEARBY_ROUTES = \"SHOW_NEARBY_ROUTES\";\nexport const UPDATE_VIEW = \"UPDATE_VIEW\";\n\nconst initialState = {\n  activeView: SHOW_NEARBY_STOPS\n};\n\ninterface Action {\n  type: string;\n  payload: {\n    activeView: string;\n  };\n}\n\nexport interface NearbyReducerState {\n  activeView: string;\n}\n\nconst nearbyViewReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case UPDATE_VIEW:\n      return {\n        ...state,\n        activeView: action.payload.activeView\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\n\nexport default nearbyViewReducer;\n","import { concat, each, map, reduce, sortBy } from \"lodash\";\nimport { Direction, Route, StopLocation } from \"../../../api/trimet/types\";\nimport { StopLocationsDictionary } from \"../stopsReducer\";\n\nexport interface RouteDirection {\n  routeId: number;\n  directionId: number;\n  routeDescription: string;\n  routeDirectionDescription: string;\n}\n\nfunction getDirectionsOnRoute(route: Route, routeId: number): RouteDirection[] {\n  return map(route.dir, (direction: Direction) => {\n    const routeDescription = route.desc;\n    const directionId = direction.dir;\n    const routeDirectionDescription = direction.desc;\n\n    return {\n      directionId,\n      routeDescription,\n      routeDirectionDescription,\n      routeId\n    };\n  });\n}\n\nfunction getRoutes(stopLocation: StopLocation): RouteDirection[] {\n  return reduce(\n    stopLocation.route,\n    (result: RouteDirection[], route: Route) => {\n      const routeId = route.route;\n      const directions = getDirectionsOnRoute(route, routeId);\n\n      return concat(result, directions);\n    },\n    []\n  );\n}\n\nexport default function getRoutesFromStopLocations(\n  stopLocations: StopLocationsDictionary\n): RouteDirection[] {\n  const results = reduce(\n    stopLocations,\n    (routeResult: RouteDirection[], stopLocation: StopLocation) => {\n      const routes: RouteDirection[] = getRoutes(stopLocation);\n      return concat(routeResult, routes);\n    },\n    []\n  );\n\n  return sortBy(results, routeDirection => routeDirection.routeId);\n}\n\nexport interface RouteDirectionsDict {\n  [id: number]: {\n    description: string;\n  };\n}\n\nexport interface RouteInfo {\n  description: string;\n  id: number;\n  type: string;\n}\n\nexport interface RouteAndRouteDirections {\n  routeDirections: RouteDirectionsDict;\n  routeInfo: RouteInfo;\n}\n\nexport interface RouteDirectionDict {\n  [routeId: number]: RouteAndRouteDirections;\n}\n\nfunction createInitialRoute(route: Route): RouteAndRouteDirections {\n  const routeDirection = route.dir[0];\n\n  return {\n    routeDirections: {\n      [routeDirection.dir]: {\n        description: routeDirection.desc\n      }\n    },\n    routeInfo: {\n      description: route.desc,\n      id: route.route,\n      type: route.type\n    }\n  };\n}\n\nfunction addDirectionToRoute(\n  route,\n  nearbyRoute,\n  acc: RouteDirectionDict,\n  routeId\n) {\n  const directionId = route.dir[0].dir;\n  const routeDirection = nearbyRoute.routeDirections[directionId];\n\n  if (!routeDirection) {\n    acc[routeId].routeDirections[directionId] = {\n      description: route.dir[0].desc\n    };\n  }\n}\n\nexport function getRoutesFromStops2(\n  stopLocations: StopLocationsDictionary\n): RouteDirectionDict {\n  return reduce(\n    stopLocations,\n    (acc: RouteDirectionDict, stopLocation, key) => {\n      each(stopLocation.route, route => {\n        const routeId = route.route;\n        const nearbyRoute = acc[routeId];\n\n        if (!nearbyRoute) {\n          acc[routeId] = createInitialRoute(route);\n        } else {\n          addDirectionToRoute(route, nearbyRoute, acc, routeId);\n        }\n      });\n\n      return acc;\n    },\n    {}\n  );\n}\n","import { getDistance } from \"geolib\";\nimport { map, mapKeys } from \"lodash\";\nimport moment from \"moment\";\nimport {\n  Coords,\n  Location,\n  StopData,\n  StopLocation\n} from \"../../api/trimet/types\";\nimport {\n  LOAD_ARRIVALS_COMPLETE,\n  LOAD_STOP_COMPLETE,\n  LOAD_STOPS\n} from \"../constants\";\nimport {\n  getRoutesFromStops2,\n  RouteDirectionDict\n} from \"./util/getRoutesFromStopLocations\";\n\nexport interface StopsReducerState {\n  loading: boolean;\n  stopLocations: StopLocationsDictionary;\n  nearbyRoutes: RouteDirectionDict;\n  timeOfLastLoad: string;\n}\n\ninterface Payload {\n  stopData: StopData;\n  radius: number;\n  location: Location;\n}\n\ninterface Action {\n  payload?: Payload;\n  type: string;\n}\n\nexport interface StopLocationsDictionary {\n  [locationId: number]: StopLocation;\n}\n\nexport interface StopLocationWithDistance extends StopLocation {\n  distance: number;\n  distanceOrder: number;\n}\n\nfunction calculateDistance(\n  lng: number,\n  lat: number,\n  currentLocation: Coords\n): number {\n  const stopLocation = { latitude: lat, longitude: lng };\n\n  return getDistance(stopLocation, currentLocation);\n}\n\nfunction addDistanceToCurrentLocation(\n  stopLocation: StopLocation[],\n  currentLocation: Coords\n): StopLocationWithDistance[] {\n  return map(stopLocation, (location: StopLocation, index) => {\n    return {\n      ...location,\n      distance: calculateDistance(location.lng, location.lat, currentLocation),\n      distanceOrder: index\n    };\n  });\n}\n\nfunction formatStopLocations(\n  stopLocation: StopLocation[],\n  currentLocation: Coords\n): StopLocationsDictionary {\n  const stopLocationsWithDistance = addDistanceToCurrentLocation(\n    stopLocation,\n    currentLocation\n  );\n\n  return mapKeys(stopLocationsWithDistance, (location: StopLocation) => {\n    return location.locid;\n  });\n}\n\nconst initialState = {\n  loading: false,\n  timeOfLastLoad: \"\"\n};\n\nfunction getLoadStopCompleteState(action: Action, state) {\n  const { payload } = action;\n  const { location, stopData } = payload;\n  const currentLocation = location.coords;\n  const stopLocations = formatStopLocations(stopData.location, currentLocation);\n  const nearbyRoutes = getRoutesFromStops2(stopLocations);\n\n  return {\n    ...state,\n    loading: false,\n    nearbyRoutes,\n    stopLocations,\n    timeOfLastLoad: moment().format(\"ddd, h:mm:ss a\")\n  };\n}\n\nfunction getLoadArrivalsCompleteState(state) {\n  return {\n    ...state,\n    timeOfLastLoad: moment().format(\"ddd, h:mm:ss a\")\n  };\n}\n\nfunction getLoadStopsCompleteState(state) {\n  return {\n    ...state,\n    loading: true\n  };\n}\n\nconst stopsReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case LOAD_STOPS:\n      return getLoadStopsCompleteState(state);\n    case LOAD_STOP_COMPLETE:\n      return getLoadStopCompleteState(action, state);\n    case LOAD_ARRIVALS_COMPLETE:\n      return getLoadArrivalsCompleteState(state);\n    default:\n      return {\n        ...state\n      };\n  }\n};\n\nexport default stopsReducer;\n","import { CHANGE_VIEW } from \"../constants\";\n\nexport const NEARBY_STOPS_VIEW = \"NEARBY_STOPS_VIEW\";\nexport const BOOKMARKS_VIEW = \"BOOKMARKS_VIEW\";\n\nexport interface ViewReducerState {\n  activeView: string;\n}\n\nconst initialState = {\n  activeView: NEARBY_STOPS_VIEW\n};\n\ninterface Action {\n  type: string;\n  payload: {\n    activeView: string;\n  };\n}\n\nconst viewReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case CHANGE_VIEW:\n      return {\n        ...state,\n        activeView: action.payload.activeView\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\n\nexport default viewReducer;\n","import { combineReducers } from \"redux\";\nimport arrivalsReducer, { ArrivalsReducerState } from \"./arrivalsReducer\";\nimport bookmarkSectionReducer, {\n  BookmarkSectionReducerState\n} from \"./bookmarkSectionReducer\";\nimport bookmarksReducer, { BookmarksReducerState } from \"./bookmarksReducer\";\nimport currentLocationReducer, {\n  CurrentLocationReducerState\n} from \"./currentLocationReducer\";\nimport nearbyViewReducer, { NearbyReducerState } from \"./nearbyViewReducer\";\nimport stopsReducer, { StopsReducerState } from \"./stopsReducer\";\nimport viewReducer, { ViewReducerState } from \"./viewReducer\";\n\nexport interface RootState {\n  stopsReducer: StopsReducerState;\n  arrivalsReducer: ArrivalsReducerState;\n  viewReducer: ViewReducerState;\n  bookmarksReducer: BookmarksReducerState;\n  bookmarkSectionReducer: BookmarkSectionReducerState;\n  currentLocationReducer: CurrentLocationReducerState;\n  nearbyReducer: NearbyReducerState;\n}\n\nconst app = combineReducers<RootState>({\n  arrivalsReducer,\n  bookmarkSectionReducer,\n  bookmarksReducer,\n  currentLocationReducer,\n  nearbyReducer: nearbyViewReducer,\n  stopsReducer,\n  viewReducer\n} as any);\n\nexport default app;\n","export async function getTrimetData<T>(requestURI: string): Promise<T> {\n  return fetch(requestURI)\n    .then(res => res.json())\n    .then(json => json.resultSet);\n}\n","import { fixtureEnabled } from \"../util\";\nimport { API, BASE_URL } from \"./constants\";\nimport { arrivalsFixtureData } from \"./fixture\";\nimport { ArrivalData } from \"./types\";\nimport { getTrimetData } from \"./util\";\n\nconst ARRIVALS_BASE_URL = `${BASE_URL}V2/arrivals/`;\n\nfunction getURL(locIDs: string, minutes: number): string {\n  return `${ARRIVALS_BASE_URL}json/true/locIDs/${locIDs}/showPosition/true/minutes/${minutes}/${API}`;\n}\n\nexport async function getArrivals(\n  locIDs: string,\n  minutes: number\n): Promise<ArrivalData> {\n  if (fixtureEnabled()) {\n    return arrivalsFixtureData();\n  }\n\n  const request = getURL(locIDs, minutes);\n\n  return getTrimetData<ArrivalData>(request);\n}\n","// tslint:disable:no-submodule-imports\nimport { call, put } from \"redux-saga/effects\";\n// tslint:enable:no-submodule-imports\nimport { getArrivals } from \"../../api/trimet/arrivals\";\nimport { LOAD_ARRIVALS, LOAD_ARRIVALS_COMPLETE } from \"../constants\";\n\nconst MINUTES_TO_POLL_ARRIVALS = 45;\n\nexport function* loadArrivalData(action) {\n  const locationId = action.payload.locationId;\n  const stringNumberLocationId = locationId.toString(10);\n\n  try {\n    yield put({ type: LOAD_ARRIVALS, payload: { locationId } });\n    const arrivalData = yield call(\n      getArrivals,\n      stringNumberLocationId,\n      MINUTES_TO_POLL_ARRIVALS\n    );\n    yield put({\n      payload: { arrivalData, locationId },\n      type: LOAD_ARRIVALS_COMPLETE\n    });\n  } catch (e) {\n    // console.error(e);\n  }\n}\n","export function fetchLocalStorageItemByKey(key: string) {\n  return JSON.parse(localStorage.getItem(key)) || {};\n}\n\nexport function updateStoredItemByKey(key: string, content) {\n  localStorage.setItem(key, JSON.stringify(content));\n}\n","import { omit } from \"lodash\";\nimport { StopLocation } from \"../trimet/types\";\nimport { fetchLocalStorageItemByKey, updateStoredItemByKey } from \"./util\";\n\nexport const BOOKMARKS = \"BOOKMARKS\";\n\ninterface StoredBookmarks {\n  [locationId: number]: StopLocation;\n}\n\nexport function fetchStoredBookmarks(): StoredBookmarks {\n  return fetchLocalStorageItemByKey(BOOKMARKS);\n}\n\nfunction updateBookmarks(existingBookmarks) {\n  updateStoredItemByKey(BOOKMARKS, existingBookmarks);\n}\n\nexport function storeLocationBookmark(stopLocation: StopLocation) {\n  const existingBookmarks = fetchStoredBookmarks();\n\n  existingBookmarks[stopLocation.locid] = stopLocation;\n\n  updateBookmarks(existingBookmarks);\n}\n\nexport function removeStoredBookmark(locationId: number) {\n  const bookmarks = fetchStoredBookmarks();\n  const updatedBookmarks = omit(bookmarks, locationId);\n\n  updateBookmarks(updatedBookmarks);\n}\n","// tslint:disable:no-submodule-imports\nimport { call, put } from \"redux-saga/effects\";\nimport {\n  removeStoredBookmark,\n  storeLocationBookmark\n} from \"../../api/localstorage/bookmarks.localstorage\";\n// tslint:enable:no-submodule-imports\nimport { StopLocation } from \"../../api/trimet/types\";\nimport { CREATE_STOP_BOOKMARK, REMOVE_STOP_BOOKMARK } from \"../constants\";\n\ninterface BookmarkStopAction {\n  payload: {\n    stopLocation: StopLocation;\n  };\n}\n\nexport function* bookmarkStop(action: BookmarkStopAction) {\n  try {\n    const stopLocation = action.payload.stopLocation;\n\n    yield put({\n      payload: { stopLocation },\n      type: CREATE_STOP_BOOKMARK\n    });\n\n    yield call(storeLocationBookmark, stopLocation);\n  } catch (e) {\n    yield put({ type: \"API_ERROR\", error: e });\n  }\n}\n\ninterface RemoveStopBookmarkAction {\n  payload: {\n    locationId: number;\n  };\n}\n\nexport function* removeStopBookmark(action: RemoveStopBookmarkAction) {\n  try {\n    const locationId = action.payload.locationId;\n\n    yield put({\n      payload: { locationId },\n      type: REMOVE_STOP_BOOKMARK\n    });\n\n    yield call(removeStoredBookmark, locationId);\n  } catch (e) {\n    yield put({ type: \"API_ERROR\", error: e });\n  }\n}\n","import { filter, find, omit } from \"lodash\";\nimport {\n  BookmarkSectionProps,\n  BookmarkSectionsProps\n} from \"../../store/reducers/bookmarkSectionReducer\";\nimport { fetchLocalStorageItemByKey, updateStoredItemByKey } from \"./util\";\n\nexport const BOOKMARK_SECTIONS = \"BOOKMARK_SECTIONS\";\n\nexport function fetchStoredBookmarkSections(): BookmarkSectionsProps {\n  return fetchLocalStorageItemByKey(BOOKMARK_SECTIONS);\n}\n\nfunction updateStoredBookmarkSections(bookmarkSections: BookmarkSectionsProps) {\n  updateStoredItemByKey(BOOKMARK_SECTIONS, bookmarkSections);\n}\n\nexport function storeBookmarkSection(\n  nextId: number,\n  bookmarkSection: BookmarkSectionProps\n) {\n  const bookmarkSections = fetchStoredBookmarkSections();\n\n  bookmarkSections[nextId] = bookmarkSection;\n\n  updateStoredBookmarkSections(bookmarkSections);\n}\n\nexport function removeStoredBookmarkSection(bookmarkSectionId: number) {\n  const bookmarkSections = fetchStoredBookmarkSections();\n  const updatedBookmarkSections = omit(bookmarkSections, bookmarkSectionId);\n\n  updateStoredBookmarkSections(updatedBookmarkSections);\n}\n\nexport function updateStoredBookmarkSection(\n  bookmarkSectionId: number,\n  stopId: number\n) {\n  const bookmarkSections = fetchStoredBookmarkSections();\n  const bookmarkSection = bookmarkSections[bookmarkSectionId];\n  const bookmarkInSection = find(\n    bookmarkSection.bookmarkedStops,\n    stop => stop === stopId\n  );\n\n  if (!bookmarkInSection) {\n    bookmarkSection.bookmarkedStops.push(stopId);\n    updateStoredBookmarkSections(bookmarkSections);\n  }\n}\n\nexport function removeStoredBookmarkFromSection(\n  bookmarkSectionId: number,\n  stopId: number\n) {\n  const bookmarkSections = fetchStoredBookmarkSections();\n  const bookmarkSection = bookmarkSections[bookmarkSectionId];\n  const bookmarkSectionStops = bookmarkSection.bookmarkedStops;\n  const bookmarkInSection = find(bookmarkSectionStops, stop => stop === stopId);\n\n  if (bookmarkInSection) {\n    bookmarkSections[bookmarkSectionId].bookmarkedStops = filter(\n      bookmarkSectionStops,\n      id => id !== stopId\n    );\n\n    updateStoredBookmarkSections(bookmarkSections);\n  }\n}\n\nexport function removeAllStoredBookmarksInSection(bookmarkSectionId: number) {\n  const bookmarkSections = fetchStoredBookmarkSections();\n  const bookmarkSection = bookmarkSections[bookmarkSectionId];\n  bookmarkSection.bookmarkedStops = [];\n\n  updateStoredBookmarkSections(bookmarkSections);\n}\n\nexport function updateStoredBookmarkSectionName(\n  bookmarkSectionId: number,\n  bookmarkSectionName: string\n) {\n  const bookmarkSections = fetchStoredBookmarkSections();\n  const bookmarkSection = bookmarkSections[bookmarkSectionId];\n  bookmarkSection.name = bookmarkSectionName;\n\n  updateStoredBookmarkSections(bookmarkSections);\n}\n","import { isEmpty, keys } from \"lodash\";\nimport { BookmarkSectionProps } from \"../reducers/bookmarkSectionReducer\";\n\nexport function getNextId({ bookmarkSectionReducer }): number {\n  if (isEmpty(bookmarkSectionReducer.bookmarkSections)) {\n    return 0;\n  }\n\n  const bookmarksByKeys = keys(bookmarkSectionReducer.bookmarkSections);\n  const lastKey = bookmarksByKeys[bookmarksByKeys.length - 1];\n\n  return parseInt(lastKey, 10) + 1;\n}\n\nexport function getBookmarkName({ bookmarkSectionReducer }) {\n  return bookmarkSectionReducer.bookmarkInputSectionName;\n}\n\nexport function buildBookmarkSection(\n  bookmarkName: string\n): BookmarkSectionProps {\n  return {\n    bookmarkedStops: [],\n    name: bookmarkName,\n    order: 0\n  };\n}\n","// tslint:disable:no-submodule-imports\nimport { call, put, select } from \"redux-saga/effects\";\nimport {\n  removeAllStoredBookmarksInSection,\n  removeStoredBookmarkFromSection,\n  removeStoredBookmarkSection,\n  storeBookmarkSection,\n  updateStoredBookmarkSection,\n  updateStoredBookmarkSectionName\n} from \"../../api/localstorage/bookmarkSections\";\nimport {\n  CREATE_BOOKMARK_SECTION,\n  REMOVE_ALL_BOOKMARKS_FROM_SECTION,\n  REMOVE_BOOKMARK_FROM_SECTION,\n  REMOVE_BOOKMARK_SECTION,\n  UPDATE_BOOKMARK_SECTION_NAME,\n  UPDATE_BOOKMARK_SECTION_NAME_INPUT,\n  UPDATE_BOOKMARKS_SECTION_CONTENTS\n} from \"../constants/bookmarkSections\";\nimport { buildBookmarkSection, getBookmarkName, getNextId } from \"./util\";\n\ninterface UpdateSectionInputAction {\n  payload: {\n    name: string;\n  };\n}\n\nexport function* updateSectionInputName(action: UpdateSectionInputAction) {\n  const name = action.payload.name;\n\n  yield put({\n    payload: { name },\n    type: UPDATE_BOOKMARK_SECTION_NAME_INPUT\n  });\n}\n\nexport function* createBookmarkSection() {\n  try {\n    const nextId = yield select(getNextId);\n    const bookmarkName = yield select(getBookmarkName);\n    const bookmarkSection = yield buildBookmarkSection(bookmarkName);\n\n    yield put({\n      payload: { nextId, bookmarkSection },\n      type: CREATE_BOOKMARK_SECTION\n    });\n\n    yield call(storeBookmarkSection, nextId, bookmarkSection);\n  } catch (e) {\n    yield put({ type: \"API_ERROR\", error: e });\n  }\n}\n\nexport function* removeBookmarkSection(action) {\n  const bookmarkSectionId = action.payload.bookmarkSectionId;\n\n  try {\n    yield put({\n      payload: { bookmarkSectionId },\n      type: REMOVE_BOOKMARK_SECTION\n    });\n\n    yield call(removeStoredBookmarkSection, bookmarkSectionId);\n  } catch (e) {\n    yield put({ type: \"API_ERROR\", error: e });\n  }\n}\n\nexport function* updateSelectedBookmarkSection(action) {\n  const { selectedBookmarkSection, stopId } = action.payload;\n\n  try {\n    yield put({\n      payload: { selectedBookmarkSection, stopId },\n      type: UPDATE_BOOKMARKS_SECTION_CONTENTS\n    });\n\n    yield call(updateStoredBookmarkSection, selectedBookmarkSection, stopId);\n  } catch (e) {\n    yield put({ type: \"API_ERROR\", error: e });\n  }\n}\n\nexport function* removeBookmarkFromSection(action) {\n  const { bookmarkSectionId, stopId } = action.payload;\n\n  try {\n    yield put({\n      payload: { bookmarkSectionId, stopId },\n      type: REMOVE_BOOKMARK_FROM_SECTION\n    });\n\n    yield call(removeStoredBookmarkFromSection, bookmarkSectionId, stopId);\n  } catch (e) {\n    yield put({ type: \"API_ERROR\", error: e });\n  }\n}\n\nexport function* removeAllBookmarksInSection(action) {\n  const { bookmarkSectionId } = action.payload;\n\n  try {\n    yield put({\n      payload: { bookmarkSectionId },\n      type: REMOVE_ALL_BOOKMARKS_FROM_SECTION\n    });\n\n    yield call(removeAllStoredBookmarksInSection, bookmarkSectionId);\n  } catch (e) {\n    yield put({ type: \"API_ERROR\", error: e });\n  }\n}\n\nexport function* updateBookmarkSectionName(action) {\n  const { bookmarkSectionId, bookmarkSectionName } = action.payload;\n\n  try {\n    yield put({\n      payload: { bookmarkSectionId, bookmarkSectionName },\n      type: UPDATE_BOOKMARK_SECTION_NAME\n    });\n\n    yield call(\n      updateStoredBookmarkSectionName,\n      bookmarkSectionId,\n      bookmarkSectionName\n    );\n  } catch (e) {\n    yield put({ type: \"API_ERROR\", error: e });\n  }\n}\n","import { Location } from \"../trimet/types\";\nimport { fixtureEnabled, useDefaultPortlandLocation } from \"../util\";\nimport { geoLocationFixtureData } from \"./fixture\";\nimport geoLocateCurrentPosition from \"./geoLocateCurrentPosition\";\n\nfunction portlandGeoLocation(): Promise<Location> {\n  const location: Location = {\n    coords: {\n      latitude: 45.5122,\n      longitude: -122.6587\n    }\n  };\n\n  return Promise.resolve(location);\n}\n\nexport default function getCurrentPosition(): Promise<Location> {\n  if (useDefaultPortlandLocation()) {\n    return portlandGeoLocation();\n  }\n\n  if (fixtureEnabled()) {\n    return geoLocationFixtureData();\n  }\n\n  return geoLocateCurrentPosition();\n}\n","import { fixtureEnabled } from \"../util\";\nimport { API, BASE_URL } from \"./constants\";\nimport { stopFixtureData } from \"./fixture\";\nimport { Location, StopData } from \"./types\";\nimport { getTrimetData } from \"./util\";\n\nconst STOPS_BASE_URL = `${BASE_URL}V1/stops/`;\n\nfunction getURL(lat: number, long: number, radiusInFeet: number): string {\n  const latLng = `${lat},${long}`;\n  const feet = `feet/${radiusInFeet}`;\n\n  return `${STOPS_BASE_URL}json/true/showRoutes/true/showRouteDirs/true/ll/${latLng}/${feet}/${API}`;\n}\n\nexport async function getNearbyStops(\n  location: Location,\n  radiusInFeet: number\n): Promise<StopData> {\n  if (fixtureEnabled()) {\n    return stopFixtureData();\n  }\n\n  const { coords } = location;\n  const { latitude, longitude } = coords;\n  const request = getURL(latitude, longitude, radiusInFeet);\n\n  return getTrimetData<StopData>(request);\n}\n","// tslint:disable:no-submodule-imports\nimport { call, put } from \"redux-saga/effects\";\nimport getCurrentPosition from \"../../api/geolocation/getCurrentPosition\";\n// tslint:enable:no-submodule-imports\nimport { getNearbyStops } from \"../../api/trimet/stops\";\nimport { Location } from \"../../api/trimet/types\";\nimport {\n  CURRENT_LOCATION_LOAD_COMPLETE,\n  LOAD_STOP_COMPLETE,\n  LOAD_STOPS\n} from \"../constants\";\nimport { UPDATE_VIEW } from \"../reducers/nearbyViewReducer\";\n\ninterface Action {\n  payload: {\n    radiusInFeet: number;\n  };\n}\n\nexport function* loadStopData(action: Action) {\n  const radiusInFeet = action.payload.radiusInFeet;\n\n  try {\n    yield put({ type: LOAD_STOPS });\n    const location: Location = yield call(getCurrentPosition);\n    yield put({ payload: { location }, type: CURRENT_LOCATION_LOAD_COMPLETE });\n    const stopData = yield call(getNearbyStops, location, radiusInFeet);\n    yield put({\n      payload: { stopData, location, radiusInFeet },\n      type: LOAD_STOP_COMPLETE\n    });\n  } catch (e) {\n    // console.error(e);\n  }\n}\n\ninterface UpdateNearbyActiveViewAction {\n  payload: {\n    view: string;\n  };\n}\n\nexport function* updateNearbyActiveView(action: UpdateNearbyActiveViewAction) {\n  const activeView = action.payload.view;\n\n  try {\n    yield put({ type: UPDATE_VIEW, payload: { activeView } });\n  } catch (e) {\n    // console.error(e);\n  }\n}\n","// tslint:disable:no-submodule-imports\nimport { call, put } from \"redux-saga/effects\";\nimport { fetchStoredBookmarks } from \"../../api/localstorage/bookmarks.localstorage\";\nimport { fetchStoredBookmarkSections } from \"../../api/localstorage/bookmarkSections\";\n// tslint:enable:no-submodule-imports\nimport { CHANGE_VIEW, LOAD_BOOKMARKS_COMPLETE } from \"../constants\";\nimport { LOAD_BOOKMARK_SECTIONS_COMPLETE } from \"../constants/bookmarkSections\";\n\ninterface ChangeViewAction {\n  payload: {\n    activeView: string;\n  };\n}\n\nexport function* changeView(action: ChangeViewAction) {\n  try {\n    yield put({\n      payload: { activeView: action.payload.activeView },\n      type: CHANGE_VIEW\n    });\n  } catch (e) {\n    // console.error(e)\n  }\n}\n\nexport function* initialLoad() {\n  try {\n    const bookmarks = yield call(fetchStoredBookmarks);\n    const bookmarkSections = yield call(fetchStoredBookmarkSections);\n\n    yield put({\n      payload: { bookmarks },\n      type: LOAD_BOOKMARKS_COMPLETE\n    });\n\n    yield put({\n      payload: { bookmarkSections },\n      type: LOAD_BOOKMARK_SECTIONS_COMPLETE\n    });\n  } catch (e) {\n    // console.error(e);\n  }\n}\n","// tslint:disable:no-submodule-imports\nimport { takeEvery } from \"redux-saga/effects\";\n// tslint:enable:no-submodule-imports\nimport {\n  BOOKMARK_STOP_REQUEST,\n  CHANGE_VIEW_REQUEST,\n  INITIAL_LOAD_REQUEST,\n  LOAD_ARRIVALS_DATA_REQUEST,\n  LOAD_STOP_DATA_REQUEST,\n  REMOVE_BOOKMARK_STOP_REQUEST,\n  UPDATE_VIEW_REQUEST\n} from \"../constants\";\nimport {\n  BOOKMARK_SECTION_NAME_UPDATE_REQUEST,\n  BOOKMARK_SECTION_SELECT_REQUEST,\n  CREATE_BOOKMARK_SECTION_REQUEST,\n  REMOVE_ALL_BOOKMARKS_IN_SECTION_REQUEST,\n  REMOVE_BOOKMARK_FROM_SECTION_REQUEST,\n  REMOVE_BOOKMARK_SECTION_REQUEST,\n  UPDATE_BOOKMARK_SECTION_NAME_REQUEST\n} from \"../constants/bookmarkSections\";\nimport { loadArrivalData } from \"./arrivalSagas\";\nimport { bookmarkStop, removeStopBookmark } from \"./bookmarkSagas\";\nimport {\n  createBookmarkSection,\n  removeAllBookmarksInSection,\n  removeBookmarkFromSection,\n  removeBookmarkSection,\n  updateBookmarkSectionName,\n  updateSectionInputName,\n  updateSelectedBookmarkSection\n} from \"./bookmarkSectionSagas\";\nimport { loadStopData, updateNearbyActiveView } from \"./stopSagas\";\nimport { changeView, initialLoad } from \"./viewSagas\";\n\nexport function* rootSaga() {\n  // @ts-ignore\n  yield takeEvery(LOAD_STOP_DATA_REQUEST, loadStopData);\n  yield takeEvery(LOAD_ARRIVALS_DATA_REQUEST, loadArrivalData);\n  // @ts-ignore\n  yield takeEvery(CHANGE_VIEW_REQUEST, changeView);\n  yield takeEvery(INITIAL_LOAD_REQUEST, initialLoad);\n  // @ts-ignore\n  yield takeEvery(BOOKMARK_STOP_REQUEST, bookmarkStop);\n  // @ts-ignore\n  yield takeEvery(REMOVE_BOOKMARK_STOP_REQUEST, removeStopBookmark);\n  // @ts-ignore\n  yield takeEvery(BOOKMARK_SECTION_NAME_UPDATE_REQUEST, updateSectionInputName);\n  yield takeEvery(CREATE_BOOKMARK_SECTION_REQUEST, createBookmarkSection);\n  yield takeEvery(REMOVE_BOOKMARK_SECTION_REQUEST, removeBookmarkSection);\n  yield takeEvery(\n    BOOKMARK_SECTION_SELECT_REQUEST,\n    updateSelectedBookmarkSection\n  );\n  yield takeEvery(\n    REMOVE_BOOKMARK_FROM_SECTION_REQUEST,\n    removeBookmarkFromSection\n  );\n  yield takeEvery(\n    REMOVE_ALL_BOOKMARKS_IN_SECTION_REQUEST,\n    removeAllBookmarksInSection\n  );\n  yield takeEvery(\n    UPDATE_BOOKMARK_SECTION_NAME_REQUEST,\n    updateBookmarkSectionName\n  );\n  // @ts-ignore\n  yield takeEvery(UPDATE_VIEW_REQUEST, updateNearbyActiveView);\n}\n","import React, { lazy, Suspense } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport RouteLoadIndicator from \"./component/loadIndicator/RouteLoadIndicator\";\nimport appStore from \"./store/store\";\n\nconst store = appStore();\n\nconst NearbyStopsViewContainer = lazy(() =>\n  import(\n    /* webpackChunkName: \"NearbyTransitViewContainer\" */ \"./view/stops/containers/NearbyTransitViewContainer\"\n  )\n);\nconst BookmarksViewContainer = lazy(() =>\n  import(\n    /* webpackChunkName: \"BookmarksViewContainer\" */ \"./view/bookmarks/container/BookmarksViewContainer\"\n  )\n);\nconst Home = lazy(() => import(/* webpackChunkName: \"Home\" */ \"./view/Home\"));\n\nexport default class App extends React.Component {\n  public render() {\n    return (\n      <Provider store={store}>\n        <Router basename={process.env.PUBLIC_URL}>\n          <Suspense fallback={RouteLoadIndicator()}>\n            <Switch>\n              <Route exact={true} path=\"/\" component={Home} />\n              <Route path=\"/nearby\" component={NearbyStopsViewContainer} />\n              <Route path=\"/bookmarks\" component={BookmarksViewContainer} />\n              <Route component={Home} />\n            </Switch>\n          </Suspense>\n        </Router>\n      </Provider>\n    );\n  }\n}\n","import { applyMiddleware, compose, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport thunk from \"redux-thunk\";\nimport reducers from \"./reducers\";\nimport { rootSaga } from \"./sagas\";\n\nexport default function appStore() {\n  const composeEnhancers =\n    // @ts-ignore\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(\n    reducers,\n    composeEnhancers(applyMiddleware(thunk, sagaMiddleware))\n  );\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n}\n","import React from \"react\";\nimport FontAwesome from \"react-fontawesome\";\nimport \"./RouteLoadIndicator.scss\";\n\nexport default function RouteLoadIndicator() {\n  return (\n    <div className=\"load-indicator route-indicator\">\n      <FontAwesome name=\"spinner\" size=\"lg\" spin={true} />\n      Loading route!\n    </div>\n  );\n}\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log(\"New content is available; please refresh.\");\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log(\"Content is cached for offline use.\");\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"typeface-roboto\";\nimport \"../node_modules/font-awesome/css/font-awesome.css\";\nimport App from \"./App\";\nimport \"./index.scss\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\nregisterServiceWorker();\n","export const BASE_URL = \"https://developer.trimet.org/ws/\";\nexport const API_ID = \"B1566B8AE694D0B955B73666A\";\nexport const API = `appID/${API_ID}`;\n\nexport const RED_LINE_NUMBER = 90;\nexport const BLUE_LINE_NUMBER = 100;\nexport const GREEN_LINE_NUMBER = 200;\nexport const YELLOW_LINE_NUMBER = 190;\nexport const ORANGE_LINE_NUMBER = 290;\nexport const STREETCAR_S_LINE = 196;\nexport const STREETCAR_B_LOOP = 195;\nexport const STREETCAR_A_LOOP = 194;\nexport const STREETCAR_CL_LINE_SHUTTLE = 294;\n\nexport const ROUTE_DISPLAY: Routes = {\n  [RED_LINE_NUMBER]: \"Red\",\n  [BLUE_LINE_NUMBER]: \"Blue\",\n  [GREEN_LINE_NUMBER]: \"Green\",\n  [YELLOW_LINE_NUMBER]: \"Yellow\",\n  [ORANGE_LINE_NUMBER]: \"Orange\",\n  [STREETCAR_A_LOOP]: \"A Loop\",\n  [STREETCAR_B_LOOP]: \"B Loop\",\n  [STREETCAR_S_LINE]: \"NS Line\",\n  [STREETCAR_CL_LINE_SHUTTLE]: \"CL Line\"\n};\n\ninterface Routes {\n  [routeNumber: number]: string;\n}\n\nexport const getRouteColor = (routeId: string) => {\n  switch (parseInt(routeId, 10)) {\n    case RED_LINE_NUMBER:\n      return \"red\";\n    case BLUE_LINE_NUMBER:\n      return \"blue\";\n    case GREEN_LINE_NUMBER:\n      return \"green\";\n    case YELLOW_LINE_NUMBER:\n      return \"yellow\";\n    case ORANGE_LINE_NUMBER:\n      return \"orange\";\n    case STREETCAR_B_LOOP:\n      return \"#cc3e8b\";\n    case STREETCAR_S_LINE:\n      return \"#99C354\";\n    case STREETCAR_CL_LINE_SHUTTLE || STREETCAR_A_LOOP:\n      return \"#3D8FAE\";\n    default:\n      return \"#1e4d88\";\n  }\n};\n","export const LOAD_STOPS = \"LOAD_STOPS\";\nexport const LOAD_STOP_COMPLETE = \"LOAD_STOP_COMPLETE\";\n\nexport const LOAD_ARRIVALS_COMPLETE = \"LOAD_ARRIVALS_COMPLETE\";\nexport const LOAD_ARRIVALS = \"LOAD_ARRIVALS\";\n\nexport const LOAD_ARRIVALS_DATA_REQUEST = \"LOAD_ARRIVALS_DATA_REQUEST\";\nexport const LOAD_STOP_DATA_REQUEST = \"LOAD_STOP_DATA_REQUEST\";\n\nexport const CHANGE_VIEW_REQUEST = \"CHANGE_VIEW_REQUEST\";\nexport const CHANGE_VIEW = \"CHANGE_VIEW\";\nexport const INITIAL_LOAD_REQUEST = \"INITIAL_LOAD_REQUEST\";\n\nexport const BOOKMARK_STOP_REQUEST = \"BOOKMARK_STOP_REQUEST\";\nexport const REMOVE_BOOKMARK_STOP_REQUEST = \"REMOVE_BOOKMARK_STOP_REQUEST\";\nexport const CREATE_STOP_BOOKMARK = \"CREATE_STOP_BOOKMARK\";\nexport const REMOVE_STOP_BOOKMARK = \"REMOVE_STOP_BOOKMARK\";\nexport const LOAD_BOOKMARKS_COMPLETE = \"LOAD_BOOKMARKS_COMPLETE\";\n\nexport const CURRENT_LOCATION_LOAD_COMPLETE = \"CURRENT_LOCATION_LOAD_COMPLETE\";\n\nexport const UPDATE_VIEW_REQUEST = \"UPDATE_VIEW_REQUEST\";\n","// Saga Request Actions\nexport const BOOKMARK_SECTION_NAME_UPDATE_REQUEST =\n  \"BOOKMARK_SECTION_NAME_UPDATE_REQUEST\";\nexport const CREATE_BOOKMARK_SECTION_REQUEST =\n  \"CREATE_BOOKMARK_SECTION_REQUEST\";\nexport const REMOVE_BOOKMARK_SECTION_REQUEST =\n  \"REMOVE_BOOKMARK_SECTION_REQUEST\";\nexport const BOOKMARK_SECTION_SELECT_REQUEST =\n  \"BOOKMARK_SECTION_SELECT_REQUEST\";\nexport const REMOVE_BOOKMARK_FROM_SECTION_REQUEST =\n  \"REMOVE_BOOKMARK_FROM_SECTION_REQUEST\";\nexport const REMOVE_ALL_BOOKMARKS_IN_SECTION_REQUEST =\n  \"REMOVE_ALL_BOOKMARKS_IN_SECTION_REQUEST\";\nexport const UPDATE_BOOKMARK_SECTION_NAME_REQUEST =\n  \"UPDATE_BOOKMARK_SECTION_NAME_REQUEST\";\n\n// Action / Reducer Identifiers\nexport const UPDATE_BOOKMARK_SECTION_NAME_INPUT =\n  \"UPDATE_BOOKMARK_SECTION_NAME_INPUT\";\nexport const CREATE_BOOKMARK_SECTION = \"CREATE_BOOKMARK_SECTION\";\nexport const REMOVE_BOOKMARK_SECTION = \"REMOVE_BOOKMARK_SECTION\";\nexport const UPDATE_BOOKMARKS_SECTION_CONTENTS =\n  \"UPDATE_BOOKMARKS_SECTION_CONTENTS\";\nexport const LOAD_BOOKMARK_SECTIONS_COMPLETE =\n  \"LOAD_BOOKMARK_SECTIONS_COMPLETE\";\nexport const REMOVE_BOOKMARK_FROM_SECTION = \"REMOVE_BOOKMARK_FROM_SECTION\";\nexport const REMOVE_ALL_BOOKMARKS_FROM_SECTION =\n  \"REMOVE_ALL_BOOKMARKS_FROM_SECTION\";\nexport const UPDATE_BOOKMARK_SECTION_NAME = \"UPDATE_BOOKMARK_SECTION_NAME\";\n"],"sourceRoot":""}